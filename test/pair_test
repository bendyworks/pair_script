#!/usr/bin/env bash

## SETUP
  here="$(dirname $0)"

  source $here/test_helper
  source $here/../scripts/pair

it "doesn't leak variables outside the function"
  (set -o posix; set) > /tmp/vars.before
  pair rylnd &> /dev/null
  (set -o posix; set) > /tmp/vars.after
  extra_vars=$(diff /tmp/vars.{before,after} --ignore-matching-lines=GIT_AUTHOR)
  rm /tmp/vars.{before,after}
  assert blank "$extra_vars"

it "succeeds when unsetting"
  pair -u &> /dev/null
  assert equal "$?" "0"

it "succeeds when printing config"
  pair &> /dev/null
  assert equal "$?" "0"

it "succeeds when all authors are found"
  pair rylnd &> /dev/null
  assert equal "$?" "0"

it "sets \$GIT_AUTHOR_NAME"
  pair rylnd &> /dev/null
  assert equal "$GIT_AUTHOR_NAME" "Ryland Herrick"

it "sets \$GIT_AUTHOR_EMAIL"
  pair rylnd &> /dev/null
  assert match "$GIT_AUTHOR_EMAIL" "rylnd"

it "unsets \$GIT_AUTHOR_NAME"
  pair -u &> /dev/null
  assert blank "$GIT_AUTHOR_NAME"

it "unsets \$GIT_AUTHOR_EMAIL"
  pair -u &> /dev/null
  assert blank "$GIT_AUTHOR_EMAIL"

it "uses dev@bendyworks.com in the email"
  pair rylnd &> /dev/null
  assert match "$GIT_AUTHOR_EMAIL" "dev.*bendyworks\.com"

it "sets multiple usernames in the email"
  pair rylnd bendycode &> /dev/null
  assert match "$GIT_AUTHOR_EMAIL" "rylnd"
  assert match "$GIT_AUTHOR_EMAIL" "bendycode"

it "sorts multiple usernames in the email alphabetically"
  pair rylnd bendycode &> /dev/null
  assert match "$GIT_AUTHOR_EMAIL" "bendycode.rylnd@"

it "sets multiple names for the author"
  pair rylnd bendycode &> /dev/null
  assert match "$GIT_AUTHOR_NAME" "Ryland\ Herrick"
  assert match "$GIT_AUTHOR_NAME" "Stephen\ Anderson"

it "sorts author names alphabetically by username"
  pair rylnd bendycode &> /dev/null
  assert equal "$GIT_AUTHOR_NAME" "Stephen Anderson and Ryland Herrick"

it "correctly lists more than two authors WITH AN OXFORD COMMA"
  pair rylnd bendycode bigtiger &> /dev/null
  assert equal "$GIT_AUTHOR_NAME" "Stephen Anderson, Jim Remsik, and Ryland Herrick"

it ".pairrc doesn't rely on variables defined in the function"
  pair rylnd &> /dev/null
  source $HOME/.pairrc
  assert equal "$GIT_AUTHOR_NAME" "Ryland Herrick"
  assert match "$GIT_AUTHOR_EMAIL" "rylnd"

it "alerts if not all authors are found"
  message=$(pair rylnd _bad_user_)
  assert equal "$message" "Author name not found for GitHub username: _bad_user_"

it "fails if not all authors are found"
  pair rylnd _bad_user_ &> /dev/null
  assert equal "$?" "1"

it "does nothing if it can't find all authors"
  pair -u &> /dev/null
  pair rylnd _bad_user_ &> /dev/null
  assert blank "$GIT_AUTHOR_NAME"
  assert blank "$GIT_AUTHOR_EMAIL"

## TEARDOWN
  pair -u &> /dev/null
  echo
  [[ -z "$fail" ]] || exit 1
